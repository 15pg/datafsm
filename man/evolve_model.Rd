% Generated by roxygen2 (4.0.2): do not edit by hand
\name{evolve_model}
\alias{evolve_model}
\title{Use a Genetic Algorithm to Estimate a Finite-state Machine Model}
\usage{
evolve_model(data, test_data = NULL, states = 2, actions = NULL,
  seed = NULL, popSize = 75, pcrossover = 0.8, pmutation = 0.1,
  maxiter = 55, run = 25, parallel = FALSE, priors = NULL,
  boltzmann = FALSE, alpha = 0.4)
}
\arguments{
\item{data}{data.frame that has "period" and "outcome" columns and rest of
columns are predictors, ranging from one to three predictors. All of the
(3-5 columns) should be named.}

\item{test_data}{Optional data.frame that has "period" and "outcome" columns
and rest of columns are predictors, ranging from one to three predictors.
All of the (3-5 columns) should be named. Outcome variable is the decision
the decision-maker took for that period.}

\item{states}{Optional numeric vector with the number of states.}

\item{actions}{Optional numeric vector with the number of actions. If not
provided, then actions will be set as the number of unique values in the
outcome vector.}

\item{seed}{Optional numeric vector length one.}

\item{popSize}{Optional numeric vector length one specifying the size of the
GA population. A larger number will increase the probability of finding a
very good solution but will also increase the computation time. This is
passed to the GA::ga() function of the \strong{GA} package.}

\item{pcrossover}{Optional numeric vector length one specifying probability
of crossover for GA. This is passed to the GA::ga() function of the
\strong{GA} package.}

\item{pmutation}{Optional numeric vector length one specifying probability of
mutation for GA. This is passed to the GA::ga() function of the \strong{GA}
package.}

\item{maxiter}{Optional numeric vector length one specifying max number of
iterations for stopping the GA evolution. A larger number will increase the
probability of finding a very good solution but will also increase the
computation time. This is passed to the GA::ga() function of the
\strong{GA} package.}

\item{run}{Optional numeric vector length one specifying max number of
consecutive iterations without improvement in best fitness score for
stopping the GA evolution. A larger number will increase the probability of
finding a very good solution but will also increase the computation time.
This is passed to the GA::ga() function of the \strong{GA} package.}

\item{parallel}{Optional logical vector length one. For running the GA
evolution in parallel. Depending on the number of cores registered and the
memory on your machine, this can make the process much faster, but only
works for Unix-based machines that can fork the processes.}

\item{priors}{Optional numeric matrix of solutions strings to be included in
the initialization, where the number of columns is equal to the number of
bits. User needs to use a decoder function to translate prior decision
models into bits and then provide them. If this is not specified, then
random priors are automatically created.}

\item{boltzmann}{Optional logical vector length one.}

\item{alpha}{Optional numeric vector length one. This is an additional
  parameter to tune/set if \code{boltzmann} is set to TRUE.}
}
\value{
Returns an S4 object of class ga_fsm. See \linkS4class{ga_fsm} for
  the details of the slots (objects) that this type of object will have and
  for information on the methods that can be used to summarize the calling
  and execution of \code{evolve_model()}, including \code{\link{summary}} and
  print.
}
\description{
\code{evolve_model} uses a genetic algorithm to estimate a finite-state
machine model, primarily for understanding and predicting decision-making.
}
\details{
This is the main function of the \strong{fsm} package. It takes data on
predictors and data on the outcome. It automatically creates a fitness
function that takes the data, an action vector \code{evolve_model} generates,
and a state matrix \code{evolve_model} generates as input and returns numeric
vector of the same length as the \code{outcome}. \code{evolve_model} then
computes a fitness score for that potential solution FSM by comparing it to
the provided \code{outcome}. This is repeated for every FSM in the population
and then the probability of selection for the next generation is proportional
to the fitness scores.

If parallel is set to TRUE, then these evaluations are distributed across the
available processors of the computer using the \strong{doParallel} package,
otherwise, the evalulations of fitness are conducted sequentially. Because
this fitness function that \code{evolve_model} creates must loop through all
the data everytime it is evaluated and we need to evaluate many possible
solution FSMs, the fitness function is implemented in C++ so it is very fast.

\code{evolve_model} uses a stochastic meta-heuristic optimization routine to
estimate the parameters that define a FSM model. Generalized simulated
annealing, or tabu search could work, but they are more difficult to
parallelize. The current version uses the \strong{GA} package's genetic
algorithm because GAs perform well in rugged search spaces to solve integer
optimization problems, are a natural complement to our binary string
representation of FSMs, and are easily parallelized.

This function evolves the models on training data and then, if a test set is
provided, uses the best solution to make predictions on test data. Finally,
the function returns the GA object and the decoded version of the best string
in the population. See \linkS4class{ga_fsm} for the details of the slots
(objects) that this type of object will have.
}
\examples{
# Create data:
cdata <- data.frame(period = 1:5, outcome = c(1,2,1,1,1),
my.decision1 = c(1,0,1,1,1), other.decision1 = c(0,0,0,1,1))
(result <- evolve_model(cdata))
summary(result)
}

